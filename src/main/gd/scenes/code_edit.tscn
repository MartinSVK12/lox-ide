[gd_scene load_steps=7 format=3 uid="uid://wxq6uj47s8k0"]

[ext_resource type="FontFile" uid="uid://c5p6grn1488p6" path="res://fonts/ttf/JetBrainsMono-Regular.ttf" id="1_07xbo"]
[ext_resource type="Script" path="res://src/main/gd/scripts/lox_highlighter_base.gd" id="1_rlu70"]
[ext_resource type="Script" path="res://src/main/gd/scripts/code_edit.gd" id="2_3pl4h"]
[ext_resource type="Script" path="res://src/main/gd/scripts/lox_static_highlighter.gd" id="4_oheea"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_r7tk3"]
bg_color = Color(0, 0, 0, 1)

[sub_resource type="SyntaxHighlighter" id="SyntaxHighlighter_omycr"]
resource_local_to_scene = true
script = ExtResource("1_rlu70")

[node name="CodeEdit" type="CodeEdit" node_paths=PackedStringArray("highlighter")]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/current_line_color = Color(0.1, 0.1, 0.1, 1)
theme_override_fonts/font = ExtResource("1_07xbo")
theme_override_styles/normal = SubResource("StyleBoxFlat_r7tk3")
text = "import \"bag.lox\";
import \"abstract_list.lox\";

interface<T> AbstractList {

  size(): number
  isEmpty(): boolean
  
  add(o: <T>): boolean
  insert(index: number, o: <T>): boolean
  remove(o: <T>): boolean
  removeAt(index: number): boolean
  contains(o: <T>): boolean
  indexOf(o: <T>): number
  get(i: number): <T>

  clear()

  forEach(callback: function)
  forEachIndexed(callback: function)
}

class<T> List << AbstractList {
    var _length: number = 0;
    var _items: Bag = Bag();
    
    static generic(generic_type: <T>|nil, type: string): <T>|nil {
       	print \"generic method\";
       	return nil;
    }

    native modify(obj: any|nil)

    insert(index: number, o: <T>): boolean {
        if(this._length <= index) return false;
        this._items[index] = o;
        return true;
    }

    add(o: <T>): boolean {
        this._items[this._length] = o;
        this._length = this._length + 1;
        return true;
    }

    remove(o: <T>): boolean {
        if(!this.contains(o)) return false;
        var index: number = this.indexOf(o);
        return this.removeAt(index);
    }

    removeAt(index: number): boolean {
        if(index != -1){
            this._items[index] = nil;
            for(var i: number = index; i < this._length; i = i + 1){
                this._items[i] = this._items[i + 1];
            }
            this._length = this._length - 1;
            return true;
        }
        return false;
    }

    indexOf(o: <T>): number {
        for(var i: number = 0; i < this._length; i = i + 1){
            if(this.get(i) == o){
                return i;
            }
        }
        return -1;
    }

    contains(o: <T>): boolean {
        for(var i: number = 0; i < this._length; i = i + 1){
            if(this.get(i) == o){
                return true;
            }
        }
        return false;
    }

    size(): number {
        return this._length;
    }

    isEmpty(): boolean { return this._length == 0; }

    get(i: number): <T> {
        return this._items[i];
    }

    forEach(callback: function) {
        for(var i: number = 0; i < this._length; i = i + 1){
            callback(this.get(i));
        }
    }

    forEachIndexed(callback: function) {
        for(var i: number = 0; i < this._length; i = i + 1){
            callback(i,this.get(i));
        }
    }
    
}"
indent_wrapped_lines = true
scroll_smooth = true
minimap_draw = true
minimap_width = 120
caret_blink = true
caret_mid_grapheme = true
syntax_highlighter = SubResource("SyntaxHighlighter_omycr")
highlight_all_occurrences = true
highlight_current_line = true
symbol_lookup_on_click = true
line_folding = true
gutters_draw_breakpoints_gutter = true
gutters_draw_bookmarks = true
gutters_draw_line_numbers = true
gutters_draw_fold_gutter = true
delimiter_strings = Array[String](["\" \"", "' '"])
code_completion_enabled = true
indent_use_spaces = true
indent_automatic = true
auto_brace_completion_enabled = true
auto_brace_completion_highlight_matching = true
script = ExtResource("2_3pl4h")
highlighter = NodePath("Highlighter")

[node name="Highlighter" type="Node" parent="."]
script = ExtResource("4_oheea")

[connection signal="breakpoint_toggled" from="." to="." method="_on_breakpoint_toggled"]
[connection signal="code_completion_requested" from="." to="." method="_on_code_completion_requested"]
[connection signal="symbol_lookup" from="." to="." method="_on_symbol_lookup"]
[connection signal="symbol_validate" from="." to="." method="_on_symbol_validate"]
